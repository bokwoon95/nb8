schema.go
fs.go
notebrew.go
error.go
template.go
signup.go
login.go TODO: /login/?401 should take into account whether the user is already logged in and not just tell the user to log in indiscriminately.
logout.go
resetpassword.go
folder.go
file.go
...
server.go
notebrew/main.go

TODO: lowercase everything in the UI (buttons, links).
TODO: rework/add contentDomain template function to all admin pages which either displays the real content domain (if the domain is a non-localhost domain) or just the empty string (if the domain is localhost or has the prefix localhost:)
TODO: folder.go: rework all posts without a timestamp prefix to be ignored. This means posts will always be guaranteed to have a CreatedAt field.
TODO: folder.go: remove the title + preview from *all* notes and posts (I noticed I barely look at the summaries when I select in entry in Apple Notes). Keep things simple at first, we can introduce it again later.

TODO:
Post updated (1 file regenerated in XXms). Regenerate post list? [ Regenerate List ]
Post list updated (5 files regenerated in XXms).

NOTE: ReadDirByName/ReadDirByCreated/ReadDirByUpdated is there to improve pagination on the admin page, it allows users (you) to pump out multiple notes each day (resulting in 1000+ in a year) into a single folder and still be able to render it in reasonable time by keyset paginating.
NOTE: ReadDirFiles is there to solve the N+1 problem when the filesystem is backed by the database, allowing us to get the file metadata and contents at the same time instead of fetching the metadata first then fetching each file's contents one by one (ew). We can't just skip one, both of them are valuable for different pruposes.
fsys.GetRecursiveSize
fsys.GetAllCount
fsys.GetCountRecursive
fsys.GetTreeSize
fsys.GetTreeCount
fsys.GetListCount

{{ block "title" . }}<title>word</title>{{  end }}

{{ template "/themes/base.html" }}{{ end }}
{{ define "title" }}<title>abcd</title>{{ end }}
{{ define "content" }}{{ index $.Markdown "content.md" }}{{ end }}

abcd.html
abcd/content.md
abcd/subfile.html

TODO: we need to provide the scheme for all pages bc we need to specify the full host name, not just '/'
TODO: principle: on save, do the bare minimum that will most likely satisfy the user's requirements. leave everything else as a manual knob to trigger.
save a post => update the post, but don't update the post list. instead put a button in the alert asking if the user wants to also regenerate the post list. Whenever the post list is updated, all pages are generated (this may take a long time if there are many posts, but that's unavoidable).
    - automatic: updating a post on save
    - manual: updating the post list for a category. button is a sync icon
save a page => just update the page
    - we never have to do recursive page generation! Instead we just have to dip into the child pages and assets folder to get the template data (can be parallelized) but that's it.
    - automatic: updating a page on save
    - manual: none. every page can be updated by going into the edit page and pressing "save".

TODO: in delete.go, when we delete a post or page we must also include its output/ directory in the deletion list so that the user has a chance to click in and check for any assets before really deleting it.

page.json contains all the pagination, rss feed limit settings

paginationFormat: 1 2 ... 3 4 5 6 7 ... 8 9
paginationFormat: 1 2 3 4 5

{{ range $.Pagination.Numbers }}

/{{ join `posts` $post.Category $post.Name }}/
/{{ join `posts` $post.Category $post.Name $paginator.First }}/
/{{ join `posts` $post.Category $post.Name $paginator.Prev }}/
/{{ join `posts` $post.Category $post.Name $paginator.Current }}/
/{{ join `posts` $post.Category $post.Name $paginator.Next }}/
/{{ join `posts` $post.Category $post.Name $paginator.Last }}/
{{- range $num := $pagination.Numbers }}
{{- end }}
{{ int $paginator.Last }} is the total number of pages -- 100 pages means the last page number is 100.
    Too verbose -- what's the cleanest way to check if there is more than one page? {{ if ne $paginator.Last "1" }} or {{ if $pagination.Last }} or {{ if $pagination.Next }}
{{ len ($paginator.Numbers) }} is the number of pages in the current band
{{ $paginator.HasNext }}
{{ $paginator.Count }} <!-- very confusing! why not just use $paginator.Last? -->
{{ $paginator.Total }}
{{ $paginator := $.Paginator.WithLimit 5 }}
    Maybe move WithLimit from a template method call to a configuration setting? What benefit do we get making it dynamically variable page-to-page?
{{ if $paginator.HasFirst }}
    <!-- if the numbers already cover the first page, disable the first button -->
{{ end }}
    eschew HasFirst and HasLast in favor of always making the buttons clickable, that way we don't even need to implement additional logic to check whether or not to disable the first and last buttons

NOTE: we can come up with List datastructues like below but put it off until we really need it. I'd hate people putting so much logic in templates like this, just slows the whole thing down.
{{ $list := newlist }}
{{ range $image := $.Images }}{{ if hasPrefix $image.Name "post_" }}{{ $list.push $image.Name }}{{ end }}
{{ range $item := $list }}{{ $item }}{{ end }}


TODO: template.go: determine what the API for regenerating specific pages/posts looks like. This is necessary so that whenever we save a page or post, its output is automatically regenerated.
folder.html => expose forms with file/text inputs that POST to /admin/uploadfile/ and /admin/createfile/ respectively. No need for a separate /admin/uploadfile/ or /admin/createfile/ form anymore.
    - with great convenience comes great responsibility, now if there are form errors you need to redirect to folder.html with the <details> element open so that it can show the form errors :/
    - what kind of errors can occur anyway?
genuinely shook at "webkitdirectory", "mozdirectory" and "multiple" attributes (how they make multi-uploads so easy)

TODO: log stats into SQLite file (handled by main.go): timestamp, duration, status, handler

TODO: notebrew config show every possible configuration field, commented (use terminal escape codes for graying out comments).
notebrew config <file> (show the file config, commented)
notebrew config <file>.<key> (show the key value, commented)
notebrew config <file>.<key> <value> (set the value)
notebrew config <file> <json_string> (set the file contents)

TODO: we need to think of a performant way to implement a killswitch that stops serving assets of users who have gone over their bandwidth limit. It's easy to disable files from being served (just add a new "disabled" field in the files table), but the main issue is that we also need to evict the cdn cache entries for all affected files as well. This being quite a destructive action (may take hours for the cdn to repopulate its cache once we evict everything), we should not make disabling files automated (it has to be manually triggered). The last and biggest headache is how to track bandswidth usage on the CDN side, not just the origin server side :/.

what am I conflicted about? I can't have an icon per action - not enough space (I do *not* want to overflow an iPhone SE width!)
I don't have any good categorization
ugly child - regenerate site and search are not dropdowns, they're straight up links. But if I make them links without any text, it becomes too easy to fat finger and accidentally incur the cost of regenerating your site on accident.
    - search is a dropdown input
    - regenerate site is uhhh
        - I need to figure out what the UI for informing the user a template was found to be broken during rendering looks like
        - Since createpost.html/createpage.html/createfile.html no longer have textarea inputs, almost all errors will be surfaced in file.html.
        - file.html's alert only shows if saving the actual file was successful or not.
        - any template rendering errors will be displayed in a separate red box that doesn't look like an alert to make it clear it isn't something dismissable -- you have to fix this now
            - This same red box will appear in folder.html if the user selects a bunch of posts/pages and clicks "regenerate"
            - btw, the "regenerate" option is now beside every page and post (and folders containing pages and posts). It is no longer a top level action, so no worries about what icon to use for that.
- To make things simpler, cut/copy/paste only work within the same top-level folder (notes, pages, posts, output).
- conservative rendering:
    - if a page is updated, only the page is regenerated.
    - if a post is updated, only the post is regenerated.
    - if a post is added or deleted, only the list page is regenerated.
    - if a list page template is updated (deleting it only means we fallback to the default posts.html), only the list page is regenerated
    - if some rando template is updated, nothing is regenerated (we don't know which page or post will reference that template so it's up to the user to manually select the pages to regenerate)
    - if some rando markdown file under a page is updated, nothing is regenerated (we don't know whether the page will reference a markdown file so it's up to the user to manually select the pages to regenerate (in the case of a documentation, they can select the entire folder and regenerate it).
    - should folder regeneration be recursive? yes.
- whether or not index.html is gzipped, we will never full-text index it! We index pages, we index templates, we index markdown files, but never the generated index.html files because it would result in duplicate entries showing up.
    - maybe we should rethink the "smart" feature of auto falling back to gzipped files for users because it makes the prospect of editing them a little murky
        - users can upload gzipped files
        - we can let users edit gzipped files (since we will unzip them for them to see, no reason to not translate whatever they typed back into a gzipped file)
        - do we want to act like a gzip service for files magically labelled as *.gz?
        - how much space savings do we even think users will save by uploading a gzipped file instead of just typing it in? text consumes barely anything, images and videos contain everything.

- asset manager in the page and post editing page is a grid of files (either the image preview or a file icon and the possibly-truncated name). The last tile contains links to both "create file" and "upload file".
    - each tile contains "insert" which inserts an <img>, <script> or <style> into where the current cursor is or the end of the document if the editor is unfocused.
    - "rename" is an action inside of the file viewer itself, not the folder viewer. You can't apply rename to multiple files so it makes no sense
    - It kind of sucks that you need to be redirected to a new page just to upload a file instead of doing it on the spot like funnyjunk. Should the upload page also show the available assets in a grid to let users track what they have uploaded so far?
    - a lot of problems would be solved if the output folder unconditionally allowed creating and uploading arbitrary files (with the allowed extensions of course). So anytime we need to link the user to a page where they can create or upload a file (in the page/post asset manager), we just link them to the corresponding folder in the output directory. Which means the output folder always needs a link to get back to the source post or page that it is derived from.
- I don't know how to continue. I don't know how to plan. Should you be able to add notes anymore from the root folder? Or is it more like a page where it is context-dependent so you have to navigate to a folder before you can create items in it? So I can only add posts from the root folder? Should I remove that as well? Only left with create site? But people will barely create sites so is it worth putting that action so prominently?
- I feel like a lot of problems would be alleviated if I had a more general-purpose icon that I could use to stuff all miscellaneous actions into like "create note" or "create post" or "regenerate site".
    - Maybe that's the key? At maximum we will only ever have 3 icons on top: clipboard (cut/copy/paste), sort by (plus previous/next pagination buttons below), hamburger menu (everything else).
- each post/page has a "view post/view page" link up top.
- remove 'admin' from file.html, now it looks like <- back | posts | view | output
- the universally allowed filetypes: .html .css .js .md .txt
    - however, anything other than .md and .txt is ignored in posts/
    - however, anything other than .md and .txt is ignored in posts/
- IDEA: "Create file" -> Display a create file page where you ask for the name as well as a dropdown with .html, .css, .js or .md (you can set the default value with a query param).
    - Change whatever the user types to be url safe, then create a post by that name as well as an output folder in output/, then redirect to the newly create page source file.
    - Since we now know the file extension, we don't have to guess which extension to apply. The correct codemirror extension is loaded when the page renders.
    - Since we now have an output folder in the output/ directory, any images or videos the user uploads goes straight into that output folder
        - When they rename the post name, the output folder name is renamed as well requiring no URL change since the images are referenced locally <img src="bird.jpg">.
- I suspect all of notebrew's features is sufficient to recreate https://kansai-odyssey.com
- notes now allow all file types (identical to themes/ but private), so .html .css .js .md .txt + any image you can upload

universal addressing system: omg maybe anything that starts with /themes/**/*.html is considered to be sourced from the themes folder, while any bare *.html is sourced from the current folder. You are not allowed to reference any other page's templates.
{{ template "/themes/common.html" }}
{{ template "common.html" }} // NOT ALLOWED! Because it would violate the global addressability of templates making it impossible to cache (common.html does not mean common.html everywhere)
{{ markdown "/themes/about-me.md" }}
{{ markdown "content.md" }}
<img src="/themes/bird.jpg"></img>
<img src="bird.jpg"></img>
![](/themes/bird.jpg)
![](bird.jpg)
{{ template "/themes/github.com/bokwoon95/plainsimple/file.html" }}

notebrew-config/503.html => 503 The server is down for maintenance

rename any image with the suffix *-original.<ext> and notebrew will honour it by not compressing the image
image compression is done immediately on demand so users are responsible for babysitting the upload and monitoring its compression status (no queue system needed, if upload or compression fails the user is notified and that's it)

default dir: $HOME/notebrew-admin
default config? $HOME/notebrew-config
notebrew.db lives in uh ~/notebrew-config? ~/notebrew-admin? ~/notebrew.db?
notebrew-config.txt => ~/Dropbox/notebrew-config/

static/dynamic private/public config:
- static private: database.json, dns01.json, smtp.json, s3.json
- static public: admin-folder.txt domain.txt, content-domain.txt, multisite.txt
- dynamic private: captcha.json
- dynamic public: allow-signup.txt

important: notebrew ip which gets the ip address of the current machine. this is so that users can add their A/AAAA records accordingly. Actually, this means we can double check the dns resolution ourselves on startup and inform the user if the domain name they provided does not point to the ip address of the current machine. BUT not on startup, but rather as a separate subcommand. In fact, we can bury it within the config subcommand? If a user provides a domain name and dns doesnt resolve to the current machine we will straight up fail. Advanced users can bypass this by writing the config json directly instead of relying on the subcommand.
notebrew config
Ctrl+C to stop anytime. Press enter without typing anything if you are satisfied with the current (or default) value.
config folder?
admin folder? (the admin folder is where X are stored. the current value is)
configure database? (database currently not configured):
    database dialect?
    sqlite file location?
    database host?
    database port?
    database user?
    database name?
    database password?
domain?
content domain? (content domain is currently not configured):
multisite?
dns01 (y/n)? (always show this if the domain is public and multisite is enabled. sanity check to make sure the api keys are valid or else fail this step)
allow signups?
captcha (y/n)?
    captcha site key?
    captcha secret key?
s3 (y/n)? (if s3 not configured and the admin-folder is the database, use ~/notebrew-objects instead)
smtp (y/n)?

dialect
user
password
host
port
dbname
sslmode

TODO: come up with a good set of utility functions that seamlessly represent file operations so that you can queue them up effortlessly to use for testing ("first create this file, then create this folder, then..." etc). We need to do a lot of file operations to replicate the use cases we are testing, so better make this painless (and readable!)
TODO: mailer.json instead of mailer.txt, that way users don't have to urlencode their password to put it in the smtp URL.
TODO: what may a user want to display in a posts.html? A daily comic series, photography showcase, full blown posts, etc? We never let the user make an N+1 query, whatever fields they want must be supplied inside the call to getPosts. They get to cap how many posts are displayed per page via pagination.json/rss.json (ugh) in the category folder, which is stored in the files.data field.

notebrew encrypt -key $KEY $MESSAGE
notebrew decrypt
notebrew decrypt 'ABCDEFHGH' | notebrew
notebrew -config '{"domain":"bokwoon.com"}'
notebrew -config $(cat config.json | notebrew decrypt -key $NOTEBREW_SECRET_KEY)

-dir :database: -database "$HOME/notebrew.db" -multisite subdomain -address notebrew.com,notebrew.io

www.nbrew.io nuances
- only serves stuff in {sitePrefix}/output/themes
- if requested URL is a HTML page, issue a permanent redirect to that site's URL instead
- this is to prevent the same page from being available on multiple sources e.g. www.nbrew.io/@bokwoon and bokwoon.nbrew.io
- cdn.nbrew.io behaves identically to www.nbrew.io except cdn.nbrew.io may use a DNS CNAME record to point it to an actual CDN URL. If no CDN service is set up, cdn.nbrew.io gracefully degrades to serving files identical to www.nbrew.io.

nbrew.io/themes/ => https://cdn.nbrew.io/themes/
bokwoon.nbrew.io/themes/ => https://cdn.nbrew.io/@bokwoon/themes/ # Set CORS to only allow bokwoon.nbrew.io!
bokwoon.com/themes/ => https://cdn.nbrew.io/bokwoon.com/themes/ # Set CORS to only allow bokwoon.com!

principle: Give me compute, give me storage, I'll give you a working program
Must be usable with JavaScript disabled (aim for a pure HTML workflow with JS enhancements)
Strive to be efficient so more users can be packed into a single cheap server. If a feature and server efficiency are at odds, always pick server efficiency at the expense of user convenience.
Be as hands-off as possible. Avoid task queues because they have to be babysitted (what if a task fails? what if it takes too long? Request, response, that's it)

notebrew reader (rss)
notebrew accountant (expense tracker)
