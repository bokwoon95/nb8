schema.go
fs.go
notebrew.go
error.go
template.go
signup.go
login.go
logout.go
resetpassword.go
folder.go
file.go
...
server.go
notebrew/main.go

- remove the numFolders and numFiles count from the folder handler as well as the template
- I guess it's safe to put a search icon on every page? "search this folder"
    - search option goes into the ellipsis dropdown menu
- updated icons
    CLIPBOARD => view/paste/clear
    SORT => date created/date updated/name | ascending/descending
    root/ => CLIPBOARD, gear (regenerate site), plus (create post, create site)
    notes/ => CLIPBOARD, SORT, plus (create note, create folder)
    pages/ => CLIPBOARD, SORT, plus (create page, create folder) (create file, upload file option is inside the page editing page itself, which is actually linked to the output directory)
    posts/ => CLIPBOARD, SORT, plus (create post, create folder) (create file, upload file option is inside the post editing page itself itself, which is actually linked to the output directory)
    themes/ => CLIPBOARD, SORT, plus (create file?ext=html, upload file, create folder)
- asset manager in the page and post editing page is a grid of files (either the image preview or a file icon and the possibly-truncated name). The last tile contains links to both "create file" and "upload file".
    - each tile contains "insert" which inserts an <img>, <script> or <style> into where the current cursor is or the end of the document if the editor is unfocused.
    - "rename" is an action inside of the file viewer itself, not the folder viewer. You can't apply rename to multiple files so it makes no sense
    - It kind of sucks that you need to be redirected to a new page just to upload a file instead of doing it on the spot like funnyjunk. Should the upload page also show the available assets in a grid to let users track what they have uploaded so far?
    - a lot of problems would be solved if the output folder unconditionally allowed creating and uploading arbitrary files (with the allowed extensions of course). So anytime we need to link the user to a page where they can create or upload a file (in the page/post asset manager), we just link them to the corresponding folder in the output directory. Which means the output folder always needs a link to get back to the source post or page that it is derived from.
- I don't know how to continue. I don't know how to plan. Should you be able to add notes anymore from the root folder? Or is it more like a page where it is context-dependent so you have to navigate to a folder before you can create items in it? So I can only add posts from the root folder? Should I remove that as well? Only left with create site? But people will barely create sites so is it worth putting that action so prominently?
- I feel like a lot of problems would be alleviated if I had a more general-purpose icon that I could use to stuff all miscellaneous actions into like "create note" or "create post" or "regenerate site".
    - Maybe that's the key? At maximum we will only ever have 3 icons on top: clipboard (cut/copy/paste), sort by (plus previous/next pagination buttons below), hamburger menu (everything else).
- each post/page has a "view post/view page" link up top.
- remove 'admin' from file.html, now it looks like <- back | posts | view | output
- the universally allowed filetypes: .html .css .js .md .txt
    - however, anything other than .md and .txt is ignored in posts/
    - however, anything other than .md and .txt is ignored in posts/
- IDEA: "Create file" -> Display a create file page where you ask for the name as well as a dropdown with .html, .css, .js or .md (you can set the default value with a query param).
    - Change whatever the user types to be url safe, then create a post by that name as well as an output folder in output/, then redirect to the newly create page source file.
    - Since we now know the file extension, we don't have to guess which extension to apply. The correct codemirror extension is loaded when the page renders.
    - Since we now have an output folder in the output/ directory, any images or videos the user uploads goes straight into that output folder
        - When they rename the post name, the output folder name is renamed as well requiring no URL change since the images are referenced locally <img src="bird.jpg">.
- I suspect all of notebrew's features is sufficient to recreate https://kansai-odyssey.com

universal addressing system: omg maybe anything that starts with /themes/**/*.html is considered to be sourced from the themes folder, while any bare *.html is sourced from the current folder. You are not allowed to reference any other page's templates.
{{ template "/themes/common.html" }}
{{ template "common.html" }} // NOT ALLOWED! Because it would violate the global addressability of templates making it impossible to cache (common.html does not mean common.html everywhere)
{{ markdown "/themes/about-me.md" }}
{{ markdown "content.md" }}
<img src="/themes/bird.jpg"></img>
<img src="bird.jpg"></img>
![](/themes/bird.jpg)
![](bird.jpg)
{{ template "/themes/github.com/bokwoon95/plainsimple/file.html" }}

notebrew-config/503.html => 503 The server is down for maintenance

rename any image with the suffix *-original.<ext> and notebrew will honour it by not compressing the image
image compression is done immediately on demand so users are responsible for babysitting the upload and monitoring its compression status (no queue system needed, if upload or compression fails the user is notified and that's it)

default dir: $HOME/notebrew-admin
default config? $HOME/notebrew-config
notebrew.db lives in uh ~/notebrew-config? ~/notebrew-admin? ~/notebrew.db?
notebrew-config.txt => ~/Dropbox/notebrew-config/

static/dynamic private/public config:
- static private: database.json, dns01.json, smtp.json, s3.json
- static public: admin-folder.txt domain.txt, content-domain.txt, multisite.txt
- dynamic private: captcha.json
- dynamic public: allow-signup.txt

important: notebrew ip which gets the ip address of the current machine. this is so that users can add their A/AAAA records accordingly. Actually, this means we can double check the dns resolution ourselves on startup and inform the user if the domain name they provided does not point to the ip address of the current machine. BUT not on startup, but rather as a separate subcommand. In fact, we can bury it within the config subcommand? If a user provides a domain name and dns doesnt resolve to the current machine we will straight up fail. Advanced users can bypass this by writing the config json directly instead of relying on the subcommand.
notebrew config
Ctrl+C to stop anytime. Press enter without typing anything if you are satisfied with the current (or default) value.
config folder?
admin folder? (the admin folder is where X are stored. the current value is)
configure database? (database currently not configured):
    database dialect?
    sqlite file location?
    database host?
    database port?
    database user?
    database name?
    database password?
domain?
content domain? (content domain is currently not configured):
multisite?
dns01 (y/n)? (always show this if the domain is public and multisite is enabled. sanity check to make sure the api keys are valid or else fail this step)
allow signups?
captcha (y/n)?
    captcha site key?
    captcha secret key?
s3 (y/n)? (if s3 not configured and the admin-folder is the database, use ~/notebrew-objects instead)
smtp (y/n)?

dialect
user
password
host
port
dbname
sslmode

== rss reader ==

I still don't know what people want from an RSS reader. I don't even know what I want because I've never used an RSS reader. But to get a good idea you can google "google reader adds search" and find all the blog posts talking about it. Quite often, it would involve people talking about the features Google Reader had and bemoaning that it still doesn't have search.

TODO: come up with a good set of utility functions that seamlessly represent file operations so that you can queue them up effortlessly to use for testing ("first create this file, then create this folder, then..." etc). We need to do a lot of file operations to replicate the use cases we are testing, so better make this painless (and readable!)
TODO: mailer.json instead of mailer.txt, that way users don't have to urlencode their password to put it in the smtp URL.
TODO: what may a user want to display in a posts.html? A daily comic series, photography showcase, full blown posts, etc? We never let the user make an N+1 query, whatever fields they want must be supplied inside the call to getPosts. They get to cap how many posts are displayed per page via pagination.json/rss.json (ugh) in the category folder, which is stored in the files.data field.

notebrew encrypt -key $KEY $MESSAGE
notebrew decrypt
notebrew decrypt 'ABCDEFHGH' | notebrew
notebrew -config '{"domain":"bokwoon.com"}'
notebrew -config $(cat config.json | notebrew decrypt -key $NOTEBREW_SECRET_KEY)

-dir :database: -database "$HOME/notebrew.db" -multisite subdomain -address notebrew.com,notebrew.io

www.nbrew.io nuances
- only serves stuff in {sitePrefix}/output/themes
- if requested URL is a HTML page, issue a permanent redirect to that site's URL instead
- this is to prevent the same page from being available on multiple sources e.g. www.nbrew.io/@bokwoon and bokwoon.nbrew.io
- cdn.nbrew.io behaves identically to www.nbrew.io except cdn.nbrew.io may use a DNS CNAME record to point it to an actual CDN URL. If no CDN service is set up, cdn.nbrew.io gracefully degrades to serving files identical to www.nbrew.io.

nbrew.io/themes/ => https://cdn.nbrew.io/themes/
bokwoon.nbrew.io/themes/ => https://cdn.nbrew.io/@bokwoon/themes/
bokwoon.com/themes/ => https://cdn.nbrew.io/bokwoon.com/themes/

type Config struct{
    FS        FS
    DB        *sql.DB
    Dialect   string
    ErrorCode func(error) string
}

func New(config Config) (*Notebrew, error)
